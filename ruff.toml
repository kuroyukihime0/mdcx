# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "*_generated.py",
    "**/views/*.py",
]

# Same as Black.
line-length = 120
indent-width = 4


[lint]
# https://docs.astral.sh/ruff/rules
select = [
    # "SIM", # flake8-simplify 可简化的代码. 默认不启用
    # "D", # pydocstyle
    "I",        # isort
    "UP",       # pyupgrade
    "E",        # pycodestyle
    "F",        # Pyflakes
    "B",        # flake8-bugbear
    "C4",       # flake8-comprehensions
    "FAST",
    "ASYNC230", # Async functions should not open files with blocking methods like open
    "ASYNC251", # Async functions should not call time.sleep
]

ignore = [
    "E501",   # line too long
    "B005",   # Using .strip() with multi-character strings is misleading
    "B007",   # Loop control variable not used within the loop body
    "B904",   # Within an except clause, raise exceptions with raise ... from err or raise ... from None to distinguish them from errors in exception handling
    "SIM113", # Use `enumerate()` for index variable `n` in `for` loop
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Ignore import violations in all `__init__.py` files.
"__init__.py" = ["E402", "F401", "F403", "F811"]

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
